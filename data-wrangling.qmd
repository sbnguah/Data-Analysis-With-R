---
title: "Data Wrangling"
---

```{r}
#| echo: false
#| message: false
#| include: false
library(tidyverse)
library(magrittr)
library(gtsummary)
library(huxtable)
mytheme <- function(ht){
    ht <- huxtable::theme_article(ht)
    ht <- huxtable::set_top_padding(ht, row = "2pt")
    ht <- huxtable::set_bottom_padding(ht, row = "2pt")
    ht <- huxtable::set_font(
        ht, value = "Arial, Times New Roman, Times, Serif")
    ht <- huxtable::set_font_size(ht, value = 11)
}
options(huxtable.knit_print_df_theme = mytheme)
```

In this chapter, we begin to delve into the manipulation of data in the form of a data frame or
tibble. In so doing, we will introduce the `tidyverse` package and the various verbs (function) it
provides.

The `tidyverse` package is not just a single package but a composite of a group of packages. These
include among others the `dplyr` package. Most of the function we will be employing in this chapter
comes from `dplyr`.

We begin by reading in the `blood_donors.xls`

```{r comment=NA}
df_blood <- 
    readxl::read_xls("C:/Dataset/blood_donors_1.xls")

df_blood %>% 
    head(10)
```

The output shows we have a 25-row and 6-column tibble.

## Renaming variables

Below we rename the variables `hb` to `hemog` and `id` to `studyid` using he `rename` function, and
then show the first 5 records with the `head` function.

```{r}
df_blood %>% 
    rename(hemog = hb, studyid = id) %>% 
    head(5)
```

## Sorting data

Below we use the `arrange` function to sort the `bldgrp` in ascending order and `hb` by descending
order.

```{r}
df_blood %>% 
    arrange(bldgrp, desc(hb)) %>% 
    head(10)
```

## Subsetting data

In this subsection, we demonstrate the use of the `filter` and `select` function to select specific
records and variables in a tibble. Below we filter to select all records with `hb` \> 12g/dl and
keep only the `id`, `hb` and `sex` columns.

```{r}
df_blood %>% 
    filter(hb > 12) %>% 
    select(id, hb, sex)
```

## Generating new variables

To generate new variables we use the `mutate` function. Based on our knowledge that the hematocrit
is approximately three times the haemoglobin we generate a new variable, `hb_from_hct`.

```{r}
df_blood %>% 
    mutate(hb_from_hct = hct/3) %>% 
    head(10)
```

## Aggregating data

Data can be aggregated in R using the `summarize` function. Below we determine the mean and standard
deviation of the haemoglobin for the patient in the data.

```{r}
df_blood %>% 
    summarize(mean_hb = mean(hb), sd_hb = sd(hb))
```

Grouping the data by the "bldgrp" before the aggregation yields the aggregated means and standard
deviations for the various blood groups.

```{r comment=NA}
df_blood %>% 
    group_by(bldgrp) %>% 
    summarize(mean_hb = mean(hb), sd_hb = sd(hb))
```

## Reshaping data

In longitudinal studies, data is captured from the same individual repeatedly. Such data is recorded
either in long or wide formats. A typical example of a data frame in the long form is bpB below.

```{r}
bp_long <- read_csv(
    file = "C:/Dataset/bp_long.txt",
    col_names = TRUE, 
    col_types = c("c", "c", "i"))

bp_long
```

In this format, each visit or round of data taking is captured as a new row, but with the
appropriate study ID and period of record, captured as the variable measure above. Measurement of
systolic blood pressure on day 1 is indicated by sbp1 in the measure variable. Day 2 measurements
are indicated as sbp2.

The wide format of the same data can be obtained as below.

```{r}
bp_wide <- 
    bp_long %>% 
    pivot_wider(
        id_cols = id, 
        names_from = measure, 
        values_from = sbp)

bp_wide
```

Here, each study participant's record for the whole study is on one row of the data and the
different measurements of systolic blood pressure are captured as different variables. Next, we
convert the wide back to the long format.

```{r}
bp_wide %>% 
    pivot_longer(
        cols = c(sbp1, sbp2),
        names_to = "time",
        values_to = "syst_bp")
```

## Combining data

In a study to determine the change in weight of athletes running a marathon, data about the athletes
were obtained by the investigators. Since the marathon starts in town A and ends in town B, the
investigators decided to weigh the athletes just before starting the race. Here they took records of
the ID of the athlete's sid, sex, age and weight at the start (wgtst). The records of five of these
athletes are in the data marathonA. At the end point of the marathon, another member of the
investigation team recorded their IDs (eid), weight upon completion (wgtend) and the time it took
the athletes to complete the marathon (dura).

```{r}
dataA <- 
    read_delim(
        file = "C:/Dataset/marathonA.txt",
        col_names = TRUE,
        delim = "\t",
        col_types = c("c","c","i","d"))

dataB <- 
    read_delim(
        file = "C:/Dataset/marathonB.txt",
        col_names = TRUE,
        delim = "\t",
        col_types = c("c","c","i","d"))

dataA

dataB
```

We can determine the weight change only by matching the before and after weight of each individual.
This is where merging is very useful. Below, we merge the two data into one. This is done below.

```{r}
dataA %>% 
    full_join(dataB, by = join_by(sid == eid))
```

----------------------------------------------------------------------------------------------------

## Reading in data

```{r comment = NA}
dataF <-
    readxl::read_xlsx("C:/Dataset/SBPDATA.xlsx") %>% 
    janitor::clean_names() %>% 
    rename(
        ageyrs = a3_how_old_are_you_years,
        dxs_class = disease_class,
        gender = a1_gender
        ) %>% 
    mutate(
        dxs_class = factor(dxs_class),
        gender = factor(
            gender, 
            levels = c(0, 1), 
            labels = c("Male", "Female")))

dat <- 
    tribble(
        ~"name", ~"day", ~"month", ~"year", ~"bp",
        "Ama", 12, 05, 2020, "120/80",
        "Kwame", 14, 02, 2019, "132/66",
        "Akosua", 21, 12, 2010, "110/76",
        "Yaw", 13, 03, 1982, "144/98",
        "Yaa", 19, 08, 2000, "117/77")

dataF %>% head()

dat
```

## `arrange`

```{r}
dat %>% arrange(name, desc(day))
```

## `unite`

```{r comment=NA}
dat %>% 
    unite(col = "dob", c(day, month, year), sep="/") 
```

## `seperate`

```{r comment=NA}
dat %>% 
    separate(col = bp, into = c("sbp", "dbp"), sep = "/") 
```

```{r}
dat %>% 
    separate(col = bp, into = c("sbp", "dbp"), sep = "/") %>% 
    unite(col = "dob", c(day, month, year), sep="/") %>% 
    mutate(dob_new = lubridate::dmy(dob)) 
```

## `relocate`

```{r comment=NA}
dataF %>% 
    relocate(ageyrs, gender, .before = sbp_0) %>% 
    slice_head(n=10) 
```

```{r comment=NA}
dataF %>% 
    relocate(sid, .after = last_col()) %>% 
    slice_head(n=10) 
```

```{r comment=NA}
dataF %>% 
    relocate(where(is.numeric)) %>% 
    slice_head(n=10) 
```

```{r comment=NA}
dataF %>% 
    relocate(contains("sbp")) %>% 
    slice_head(n=10) 
```

## `summarize` & `across`

```{r comment = NA}
dataF %>% 
    summarize(across(sbp_0:sbp_8, .fns = mean, na.rm=T)) 
```

```{r}
dataF %>% 
    na.omit() %>% 
    group_by(dxs_class) %>% 
    summarize(across(where(is.numeric), ~quantile(.x))) %>% 
    ungroup() 
```

## Distinct observations

```{r}
dataF %>% 
    summarise(across(where(is.numeric), n_distinct)) 
```

## list of functions

```{r}
dataF %>% 
    filter(!is.na(dxs_class)&!is.na(gender)) %>% 
    group_by(dxs_class, gender) %>%
    summarise(
        across(
            starts_with("sbp"), 
            list(
                AVG = mean, 
                SD = sd, 
                N_missing = ~sum(is.na(.x), na.rm=TRUE))
            )
        ) %>%
    ungroup() 
```

## Summarizing by anonymous functions

```{r comment=NA}
dataF %>% 
    filter(!is.na(dxs_class)) %>% 
    group_by(dxs_class) %>%
    summarise(
        across(
            .cols = c(sbp_0, sbp_18), 
            .fns = list(
                "Mean" = ~mean(.x, na.rm=T), 
                "UpperCI" = ~(mean(.x, na.rm=T) + 
                                  1.96*sd(.x, na.rm=T)/sqrt(n())) ,
                "LowerCI" = ~(mean(.x, na.rm=T) - 
                                  1.96*sd(.x, na.rm=T)/sqrt(n()))))) %>%
    ungroup() 
```

## `expand`

```{r}
dataF %>% 
    filter(!is.na(dxs_class) & !is.na(gender)) %>% 
    expand(dxs_class, gender) 
```

## `crossing`

```{r}
dataF %>% 
    filter(!is.na(dxs_class) & !is.na(gender)) %>% 
    select(dxs_class, gender) %>% 
    crossing() 
```

## Adding a running id

```{r}
dataF %>% 
    filter(!is.na(dxs_class) & !is.na(gender)) %>% 
    select(dxs_class, gender) %>%
    mutate(running_id = row_number()) %>% 
    slice_head(n=10) 
```

## `pivot_longer` & `pivot_wider`

```{r}
dataF_long <-
    dataF %>% 
    select(gender, dxs_class, sbp_0:sbp_18) %>% 
    pivot_longer(
        cols = starts_with("sbp"),
        names_to = "measure",
        values_to = "sbp",
        values_drop_na = TRUE)

dataF_long %>% 
    slice_head(n=10) 
```

```{r}
dataF %>% 
    select(dxs_class, gender, sbp_0, sbp_2, sbp_4) %>%
    na.omit() %>% 
    group_by(dxs_class) %>% 
    pivot_wider(
        names_from = gender, 
        values_from = c(sbp_0, sbp_2, sbp_4), 
        values_fn = ~mean(.x, na.rm = TRUE)) %>% 
    ungroup() %>% 
    slice_head(n=10) 

```

## `tidyquant` tabulation

```{r}
dataF %>% 
    select(dxs_class, gender) %>% 
    na.omit() %>% 
    tidyquant::pivot_table(
        .rows = gender, .columns = dxs_class, .values = ~n()
    ) 
```

```{r comment=NA}
dataF %>% 
    select(dxs_class, gender, sbp_0, sbp_2) %>% 
    na.omit() %>% 
    tidyquant::pivot_table(.rows = gender, 
                           .columns = dxs_class, 
                           .values = ~quantile(sbp_0)) %>% 
    unnest(cols = c("DM","HPT","DM+HPT")) 
```

## `rowwise` manipulations

```{r}
dataF %>% 
    rowwise() %>% 
    mutate(
        sbp_mean = mean(
            c(sbp_0,sbp_2,sbp_4,sbp_6,sbp_8, sbp_10, sbp_12,
                             sbp_14,sbp_16, sbp_18), na.rm=T),
        sbp_sd = sd(
            c(sbp_0,sbp_2,sbp_4,sbp_6,sbp_8, sbp_10, sbp_12,
              sbp_14,sbp_16, sbp_18), na.rm=T),
        n=n()) %>% 
    ungroup() %>% 
    relocate(
        sid, dxs_class, ageyrs, gender, sbp_mean, sbp_sd, 
        contains("sbp")) %>% 
    slice_head(n=10) 
```

## `str_glue`

```{r comment=NA}
x <- c("Ama", "is", "a", "Girl")
cat(x)
```

```{r comment = NA}
name <- "Fred"
str_glue('My name is {name}.')
```

```{r comment=NA}
stringr_fcn <- "`stringr::str_glue()`"
glue_fcn    <- "`glue::glue()`"

str_glue('{stringr_fcn} is essentially an alias for {glue_fcn}.')
```

```{r comment=NA}
name <- "Fred"
age <- 50
anniversary <- as.Date("1991-10-12")
str_glue('My name is {name},',
  ' my age next year is {age + 1},',
  ' my anniversary is {format(anniversary, "%A, %B %d, %Y")}.')
```

```{r comment=NA}
str_glue('My name is {name},',
  ' my age next year is {age + 1},',
  ' my anniversary is {format(anniversary, "%A, %B %d, %Y")}.',
  name = "Joe",
  age = 40,
  anniversary = as.Date("2001-10-12"))
```

```{r comment=NA}
mtcars %>% 
    head() 

head(mtcars) %>% 
    glue::glue_data("{rownames(.)} has {hp} hp")
```

```{r comment=NA}
head(iris) %>%
  mutate(
      description = str_glue(
          "This {Species} has a petal length of {Petal.Length}"
          )
      ) 
```

```{r comment=NA}
str_glue("
    A formatted string
    Can have multiple lines
      with additional indention preserved
    ")
```

```{r comment=NA}
str_glue("

  leading or trailing newlines can be added explicitly

  ")
```

```{r comment=NA}
str_glue("
    A formatted string \\
    can also be on a \\
    single line
    ")
```

```{r comment=NA}
name <- "Fred"
str_glue("My name is {name}, not {{name}}.")
```

```{r comment=NA}
one <- "1"
str_glue(
    "The value of $e^{2\\pi i}$ is $<<one>>$.", 
    .open = "<<", 
    .close = ">>")
```

```{r comment=NA}
dataF %>% 
    filter(!is.na(sbp_0)) %>% 
    ggplot(aes(x=sbp_0)) +
    geom_histogram(col = "grey", fill = "wheat") +
    labs(title = str_glue(
        "Histogram with Mean = {mean_sbp0}mmHg and \\
         Standard Deviation = {sd_sbp0}",
        mean_sbp0 = mean(dataF$sbp_0, na.rm=T) %>% 
            round(1),
        sd_sbp0 = sd(dataF$sbp_0,   na.rm=T) %>% 
            round(1)),
         x = "Systolic Blood Pressure (mmHg)",
         y = "Frequency") +
    theme_light(base_size = 12, base_family = "serif")
```
